package model1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;


public class ZipcodeDAO {
	private DataSource dataSource;
	
	public ZipcodeDAO() {
		
	  try {
		  Context initCtx = new InitialContext();
		  Context envCtx = (Context)initCtx.lookup("java:comp/env");
		  this.dataSource = (DataSource)envCtx.lookup("jdbc/mariadb2");
	  } catch (NamingException e) {
		  System.out.println("[에러]" + e.getMessage());
	  }
	}	
		
	public ArrayList<ZipcodeTO> sidoList() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		ArrayList<ZipcodeTO> lists = new ArrayList<>();
		
		try {
			conn = this.dataSource.getConnection();
			
			String sql = "select distinct sido from zipcode";
			pstmt = conn.prepareStatement(sql);
			
			rs = pstmt.executeQuery();
			while( rs.next() ) {
				ZipcodeTO to = new ZipcodeTO();
				to.setSido( rs.getString("sido"));
				
				lists.add( to );
			}
		} catch( SQLException e ) {
			System.out.println(e.getMessage());
		} finally {
			if( rs != null ) try { rs.close();} catch(SQLException e) {}
			if( pstmt != null ) try { pstmt.close();} catch(SQLException e) {}
			if( conn != null ) try { conn.close();} catch(SQLException e) {}
		}
		
	
		
		
		try {
			Class.forName( "org.mariadb.jdbc.Driver" );
			this.conn = DriverManager.getConnection( url, user, password );
		
		} catch (ClassNotFoundException e ) {
			System.out.println("[에러]" + e.getMessage());
		} catch (SQLException e ) {
			System.out.println("[에러]" + e.getMessage());
		}
		
	public ArrayList<ZipcodeTO> searchZipcode( String strDong ) {
		
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		ArrayList<ZipcodeTO> addresses new ArrayList<>();
		
		try {
			String sql = "select zipcode, sido, gugun, dong, ri, bunji from zipcode where dong like ?";
			pstmt = this.conn.prepareStatement(sql);
			pstmt.setString(1, strDong + "%" );
			
			rs = pstmt.executeQuery();
			while(rs.next()) {
				ZipcodeTO to = new ZipcodeTO();
				to.setZipcode( rs.getString("zipcode"));
				to.setSido( rs.getString("sido"));
				to.setGugun( rs.getString("gugun"));
				to.setDong( rs.getString("dong"));
				to.setRi( rs.getString("ri"));
				to.setBunji( rs.getString("bunji"));
				
				addresses.add( to );
			}
		} catch (SQLException e) {
			System.out.println("[에러]"+ e.getMessage());
		} finally {
			if( rs != null ) try { rs.close();} catch ( SQLException e) {}
			if( pstmt != null ) try { pstmt.close();} catch ( SQLException e) {}
			if( conn != null ) try { conn.close();} catch ( SQLException e) {}
		}
		
		return addresses;
	}
		
	}
	
	
}
